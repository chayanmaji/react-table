{"version":3,"sources":["components/Utility.js","components/ColumnFilter.js","components/columns.js","components/SortIcon.js","components/ReactTable.js","components/Employee.js","App.js","reportWebVitals.js","index.js"],"names":["countries","list","Data","forEach","element","findIndex","e","country","push","sort","ColumnFilter","column","filterValue","setFilter","value","onChange","target","COLUMNS","Header","accessor","disableFilters","className","originalRow","rowIndex","disableSortBy","Filter","sortedCountries","map","index","SortIcon","isSorted","isSortedDesc","ReactTable","props","data","useMemo","columns","defaultColumn","useTable","initialState","pageIndex","pageSize","useFilters","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","previousPage","canPreviousPage","nextPage","canNextPage","pageOptions","gotoPage","pageCount","prepareRow","setPageSize","state","length","type","defaultValue","pageNumber","Number","style","width","Button","variant","onClick","disabled","Table","striped","bordered","hover","size","headerGroup","getHeaderGroupProps","headers","headerProps","getHeaderProps","getSortByToggleProps","console","log","key","colSpan","role","title","render","canFilter","row","getRowProps","cells","cell","getCellProps","Employee","useState","reactTableColumn","setReactTableColumn","reactTableData","setReactTableData","initialAddress","addressLine1","addressLine2","showFormModal","setShowFormModal","setRowIndex","selectedData","setSelectedData","addressIndex","setAddressIndex","showAddressDeleteConfirm","setShowAddressDeleteConfirm","cancelDeleteAddress","addressCell","addresses","address","employee","prepareAddressToDelete","setUniqueCountries","populateReactTableColumn","editColumnIndex","editCell","headerColumnIndex","useEffect","populateUniqueCountry","validationSchema","Yup","shape","first_name","min","max","required","last_name","email","phone","of","getClassName","errors","touched","fieldName","undefined","Modal","show","Title","enableReinitialize","initialValues","onSubmit","formValues","slice","id","values","dirty","resetForm","setFieldValue","Body","htmlFor","name","msg","component","arrayHelpers","placeholder","remove","Footer","selectedEmployeeIndex","splice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a3fb5b0.chunk.js","sourcesContent":["import Data from './Data.json';\r\n\r\nexport const countries = () => {\r\n    let list = [];\r\n\r\n    Data.forEach(element => {\r\n        const condition = (e) => e === element.country;\r\n\r\n        if (list.findIndex(condition)===-1)\r\n        {\r\n            list.push(element.country);\r\n        }\r\n    })\r\n\r\n    return list.sort();\r\n}","import React from 'react';\r\nimport { countries } from './Utility';\r\n\r\nconst ColumnFilter = ({ column }) => {\r\n    const { filterValue, setFilter } = column;\r\n\r\n    return (\r\n        <span>\r\n            <input value={filterValue || ''} onChange={(e)=>{ setFilter(e.target.value)}} />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CountryFilter = ({column}) => {\r\n    const { filterValue, setFilter } = column;\r\n    const sortedCountries = countries();\r\n\r\n    return (\r\n        <span>\r\n            <select value={filterValue} onChange={(e)=>{ setFilter(e.target.value) }}>\r\n                <option value=\"\"></option>\r\n                {\r\n                    sortedCountries.map((country, index)=>{\r\n                        return (<option key={index} value={country}>{country}</option>)\r\n                    })\r\n                }\r\n            </select>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default ColumnFilter;","import {CountryFilter} from './ColumnFilter';\r\n\r\n\r\nexport const COLUMNS = [\r\n    {\r\n        Header: 'Id',\r\n        accessor: 'id',\r\n        disableFilters : true,\r\n        className : 'column-id'\r\n    },\r\n    {\r\n        Header : 'Edit',\r\n        accessor : (originalRow , rowIndex )=>(<div>{rowIndex + 1}</div>),\r\n        disableFilters : true,\r\n        disableSortBy: true,\r\n        className : 'column-edit'\r\n    },\r\n    {\r\n        Header: 'First Name',\r\n        accessor: 'first_name',\r\n        className : 'column-fname'\r\n    },\r\n    {\r\n        Header: 'Last Name',\r\n        accessor: 'last_name',\r\n        className : 'column-lname'\r\n    },\r\n    {\r\n        Header: 'Email',\r\n        accessor: 'email',\r\n        className : 'column-email'\r\n    },\r\n    {\r\n        Header: 'Country',\r\n        accessor: 'country',\r\n        Filter: CountryFilter,\r\n        className : 'column-country'\r\n    },\r\n    {\r\n        Header: 'Phone',\r\n        accessor: 'phone',\r\n        className : 'column-phone'\r\n    },\r\n    {\r\n        Header: 'Address',\r\n        disableFilters : true,\r\n        accessor: ()=>(<div>Address</div>),\r\n        disableSortBy: true\r\n    }\r\n]","import React from 'react';\r\nimport { BiSortDown, BiSortUp } from \"react-icons/bi\";\r\n\r\nconst SortIcon = ({isSorted, isSortedDesc}) => {\r\n    return (\r\n        <span>{ isSorted? (isSortedDesc ? <BiSortDown/> : <BiSortUp/> ) : '' }</span>\r\n    )\r\n}\r\n\r\nexport default SortIcon;","import React, { useMemo } from 'react';\r\nimport { useTable, useSortBy, useGlobalFilter, useFilters, usePagination } from 'react-table';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Button } from 'react-bootstrap';\r\nimport SortIcon from './SortIcon';\r\nimport ColumnFilter from './ColumnFilter';\r\nimport './ReactTable.css';\r\n\r\nconst ReactTable = (props) => {\r\n    let data = useMemo(() => props.data );\r\n    let columns = useMemo(() => props.columns )\r\n    const defaultColumn = useMemo(() => {\r\n        return {\r\n            Filter: ColumnFilter\r\n        }\r\n    }, [])\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        previousPage,\r\n        canPreviousPage,\r\n        nextPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        prepareRow,\r\n        setPageSize,\r\n        state\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: { pageIndex: 0, pageSize: 25 }\r\n    }, useFilters, useGlobalFilter, useSortBy, usePagination);\r\n\r\n    const { pageIndex, pageSize } = state;\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span>\r\n                    Page{' '}<strong>{pageIndex + 1} of {pageOptions.length}</strong>\r\n                </span>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <span>\r\n                    | Go to page: {' '}\r\n                    <input type='number' defaultValue={pageIndex + 1}\r\n                        onChange={e => {\r\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                            gotoPage(pageNumber);\r\n                        }} style={{ width: '50px' }} />\r\n                </span>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n                    {\r\n                        [25, 50, 100].map(pageSize => (\r\n                            <option key={pageSize} value={pageSize}>Show { pageSize}</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Button variant=\"secondary\" onClick={() => { gotoPage(0) }} disabled={!canPreviousPage}>First</Button>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Button variant=\"secondary\" onClick={() => { previousPage() }} disabled={!canPreviousPage} >Previous</Button>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Button variant=\"secondary\" onClick={() => { nextPage() }} disabled={!canNextPage}>Next</Button>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Button variant=\"secondary\" onClick={() => { gotoPage(pageCount - 1) }} disabled={!canNextPage}>Last</Button>\r\n            </div>\r\n            <Table striped bordered hover {...getTableProps()} size=\"sm\">\r\n                <thead>\r\n                    {// Loop over the header rows\r\n                        headerGroups.map(headerGroup => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {// Loop over the headers in each row\r\n                                    headerGroup.headers.map(column => {\r\n                                        const headerProps = column.getHeaderProps(column.getSortByToggleProps());\r\n                                        const className = column.getHeaderProps({ className: column.className }).className;\r\n                                        console.log('className', className);\r\n                                        const { key, colSpan, role, title, onClick, style } = {...headerProps};\r\n                                        return (\r\n                                            <th key={key} colSpan={colSpan} role={role} className={className}> \r\n                                                {\r\n                                                    onClick && (\r\n                                                        <div onClick={(e) => { onClick(e) }} title={title} style={style}>\r\n                                                            {column.render('Header')}\r\n                                                            <SortIcon isSorted={column.isSorted} isSortedDesc={column.isSortedDesc} />\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                                {\r\n                                                    !onClick && (\r\n                                                        <div>{column.render('Header')}</div>\r\n                                                    )\r\n                                                }\r\n                                                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                            </th>\r\n                                        )\r\n                                    })}\r\n                            </tr>\r\n                        ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {// Loop over the table rows\r\n                        page.map(row => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <tr {...row.getRowProps()}>\r\n                                    {// Loop over the rows cells\r\n                                        row.cells.map(cell => {\r\n                                            // Apply the cell props\r\n                                            return (\r\n                                                <td {...cell.getCellProps({ className: cell.column.className })}>\r\n                                                    {// Render the cell contents\r\n                                                        cell.render('Cell')}\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReactTable;","import React, { useState, useEffect } from 'react';\r\nimport Data from './Data.json';\r\nimport { COLUMNS } from './columns';\r\nimport ReactTable from './ReactTable';\r\nimport { Button, Modal, OverlayTrigger, Popover, PopoverBody, PopoverHeader, ListGroup } from 'react-bootstrap';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport { AiOutlineEdit, AiOutlineDelete, AiOutlineInfoCircle } from 'react-icons/ai';\r\nimport { IoIosAddCircleOutline } from \"react-icons/io\";\r\nimport './Employee.css';\r\nimport { countries } from './Utility';\r\nimport * as Yup from 'yup';\r\n\r\nconst Employee = () => {\r\n\r\n    const [reactTableColumn, setReactTableColumn] = useState([]);\r\n    const [reactTableData, setReactTableData] = useState([]);\r\n\r\n    const initialAddress = {\r\n        addressLine1: '',\r\n        addressLine2: ''\r\n    }\r\n    const [showFormModal, setShowFormModal] = useState(false);\r\n    const [rowIndex, setRowIndex] = useState(-1);\r\n    const [selectedData, setSelectedData] = useState({});\r\n    const [addressIndex, setAddressIndex] = useState(-1);\r\n\r\n    const [showAddressDeleteConfirm, setShowAddressDeleteConfirm] = useState(false);\r\n\r\n    const cancelDeleteAddress = () => {\r\n        setSelectedData({});\r\n        setAddressIndex(-1);\r\n        setShowAddressDeleteConfirm(false);\r\n    }\r\n\r\n    const deleteAddress = () => {\r\n        if (selectedData.id) {\r\n            const selectedEmployeeIndex = reactTableData.findIndex(e => e.id === selectedData.id);\r\n            if (selectedEmployeeIndex >= 0) {\r\n                reactTableData[selectedEmployeeIndex].addresses.splice(addressIndex, 1);\r\n                setReactTableData(reactTableData.slice());\r\n            }\r\n        }\r\n        cancelDeleteAddress();\r\n    }\r\n\r\n    const editCell = (originalRow, rowIndex) => {\r\n        return (<div>\r\n            <AiOutlineEdit onClick={() => { setSelectedData(originalRow); setRowIndex(rowIndex); setShowFormModal(true); }} />\r\n\r\n            {/* <OverlayTrigger trigger=\"click\" placement=\"left\"\r\n                overlay={\r\n                    <Popover id={originalRow.id}>\r\n                        <Popover.Body>\r\n                            <strong>Holy guacamole!</strong> Check this info.\r\n                        </Popover.Body>\r\n                    </Popover>\r\n                }>\r\n                <AiOutlineInfoCircle />\r\n                \r\n            </OverlayTrigger> */}\r\n        </div>)\r\n    }\r\n\r\n    const prepareAddressToDelete = (employee, addressIndex) => {\r\n        setSelectedData(employee);\r\n        setAddressIndex(addressIndex);\r\n        setShowAddressDeleteConfirm(true);\r\n    }\r\n\r\n    const addressCell = (originalRow, rowIndex) => {\r\n        return (\r\n            <>\r\n                {\r\n                    originalRow.addresses.length === 0 && <div>No address added so far.</div>\r\n                }\r\n                {\r\n                    originalRow.addresses.length > 0 &&\r\n                    <ul>\r\n                        {\r\n                            originalRow.addresses.map((address, index) => {\r\n                                return (<li key={index}>\r\n                                    <AiOutlineDelete title=\"Delete\"\r\n                                        onClick={() => { prepareAddressToDelete(originalRow, index) }} />\r\n                                    -{address.addressLine1}, {address.addressLine2}\r\n                                </li>)\r\n                            })\r\n                        }\r\n                    </ul>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    // const data = useMemo(() => Data, []);\r\n    const [uniqueCountries, setUniqueCountries] = useState([]);\r\n\r\n    const populateUniqueCountry = () => {\r\n        let countries = [];\r\n        Data.forEach(element => {\r\n            const condition = (e) => e === element.country;\r\n            if (countries.findIndex(condition) === -1) {\r\n                countries.push(element.country);\r\n            }\r\n        })\r\n        setUniqueCountries(countries.sort());\r\n    }\r\n\r\n    const populateReactTableColumn = () => {\r\n        const columns = COLUMNS;\r\n        const editColumnIndex = columns.findIndex(e => e.Header === 'Edit');\r\n        if (editColumnIndex >= -1) {\r\n            columns[editColumnIndex].accessor = (originalRow, rowIndex) => (editCell(originalRow, rowIndex));\r\n        }\r\n\r\n\r\n        //Update Address column \r\n        const headerColumnIndex = columns.findIndex(e => e.Header === 'Address');\r\n        if (headerColumnIndex >= -1) {\r\n            columns[headerColumnIndex].accessor = (originalRow, rowIndex) => (addressCell(originalRow, rowIndex));\r\n        }\r\n        setReactTableColumn(columns);\r\n    }\r\n\r\n    useEffect(() => {\r\n        populateUniqueCountry();\r\n        setReactTableData(Data);\r\n        populateReactTableColumn();\r\n    }, []);\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        first_name: Yup.string().min(2, 'Too Short!').max(55, 'Too Long!').required('Required'),\r\n        last_name: Yup.string().min(2, 'Too Short!').max(55, 'Too Long!').required('Required'),\r\n        email: Yup.string().email('Invalid email').required('Required'),\r\n        country: Yup.string().required('Required'),\r\n        phone: Yup.string().min(10, 'Invalid').max(10, 'Invalid').required('Required'),\r\n        addresses: Yup.array().of(\r\n            Yup.object().shape({\r\n                addressLine1: Yup.string().min(2, 'Too Short!').required('Required'),\r\n                addressLine2: Yup.string().min(2, 'Too Short!').required('Required')\r\n            })\r\n        )\r\n    });\r\n\r\n    const onSubmit = (formValues) => {\r\n        let data = Data.slice();\r\n        const rowIndex = data.findIndex(e => e.id === formValues.id);\r\n        if (rowIndex > -1) {\r\n            data[rowIndex] = formValues;\r\n        }\r\n        setReactTableData(data);\r\n        setShowFormModal(false);\r\n    }\r\n\r\n    const getClassName = (errors, touched, rowIndex, fieldName) => {\r\n        let className = 'form-control';\r\n\r\n        if (errors.addresses && errors.addresses[rowIndex] != undefined\r\n            && errors.addresses[rowIndex] != null\r\n            && touched.addresses && touched.addresses[rowIndex] != undefined\r\n            && touched.addresses[rowIndex] != null) {\r\n            if (errors.addresses[rowIndex][fieldName] && touched.addresses[rowIndex][fieldName]) {\r\n                className = `${className} error`\r\n            }\r\n        }\r\n\r\n        return className;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <ReactTable data={reactTableData} columns={reactTableColumn} />\r\n            </div>\r\n            <Modal show={showFormModal} size=\"xl\">\r\n                <Modal.Header>\r\n                    <Modal.Title>Updating Data</Modal.Title>\r\n                </Modal.Header>\r\n                <Formik enableReinitialize initialValues={selectedData}\r\n                    onSubmit={onSubmit} validationSchema={validationSchema} >\r\n                    {\r\n                        ({ values, errors, touched, dirty, resetForm, setFieldValue }) => {\r\n                            // console.log('errors', errors);\r\n                            // console.log('touched', JSON.stringify(touched));\r\n                            // console.log('dirty', dirty);\r\n                            return (\r\n                                <>\r\n                                    <Form>\r\n                                        <>\r\n                                            <Modal.Body>\r\n                                                <div className=\"form-group row\">\r\n                                                    <label htmlFor=\"first_name\" className=\"col-sm-1 col-form-label\">First Name</label>\r\n                                                    <div className=\"col-sm-5\">\r\n                                                        <Field name=\"first_name\" id=\"first_name\"\r\n                                                            className={`form-control ${touched.first_name && errors.first_name ? \"error\" : \"\"}`}\r\n                                                            max-length=\"55\"></Field>\r\n                                                        <ErrorMessage name=\"first_name\">{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                    </div>\r\n                                                    <label htmlFor=\"last_name\" className=\"col-sm-1 col-form-label\">Last Name</label>\r\n                                                    <div className=\"col-sm-5\">\r\n                                                        <Field name=\"last_name\" id=\"last_name\"\r\n                                                            className={`form-control ${touched.last_name && errors.last_name ? \"error\" : \"\"}`}\r\n                                                            max-length=\"55\" />\r\n                                                        <ErrorMessage name=\"last_name\">{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"form-group row\">\r\n                                                    <label htmlFor=\"email\" className=\"col-sm-1 col-form-label\">Email</label>\r\n                                                    <div className=\"col-sm-5\">\r\n                                                        <Field name=\"email\" id=\"email\"\r\n                                                            className={`form-control ${touched.email && errors.email ? \"error\" : \"\"}`}\r\n                                                            max-length=\"255\" />\r\n                                                        <ErrorMessage name=\"email\">{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                    </div>\r\n                                                    <label htmlFor=\"phone\" className=\"col-sm-1 col-form-label\">Phone</label>\r\n                                                    <div className=\"col-sm-5\">\r\n                                                        <Field name=\"phone\" id=\"phone\"\r\n                                                            className={`form-control ${touched.phone && errors.phone ? \"error\" : \"\"}`}\r\n                                                            max-length=\"255\"></Field>\r\n                                                        <ErrorMessage name=\"phone\">{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"form-group row\">\r\n                                                    <label htmlFor=\"country\" className=\"col-sm-1 col-form-label\">Country</label>\r\n                                                    <div className=\"col-sm-5\">\r\n                                                        <Field name=\"country\" id=\"country\"\r\n                                                            className={`form-select ${touched.country && errors.country ? \"error\" : \"\"}`}\r\n                                                            component=\"select\">\r\n                                                            <option value=\"\"></option>\r\n                                                            {\r\n                                                                countries().map((country, index) => {\r\n                                                                    return (<option key={index} value={country}>{country}</option>)\r\n                                                                })\r\n                                                            }\r\n                                                        </Field>\r\n                                                        <ErrorMessage name=\"country\">{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <FieldArray name=\"addresses\"\r\n                                                    render={\r\n                                                        arrayHelpers => (\r\n                                                            <>\r\n                                                                <div className=\"form-group row\">\r\n                                                                    <div className=\"col-sm-1\">Addresses</div>\r\n                                                                    <div className=\"col-sm-1\">\r\n                                                                        <IoIosAddCircleOutline className=\"add\"\r\n                                                                            title=\"Add Address\"\r\n                                                                            onClick={() => {\r\n                                                                                arrayHelpers.push(initialAddress);\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                {values.addresses.map((address, index) => {\r\n                                                                    return (\r\n                                                                        <div className=\"form-group row\" key={index}>\r\n                                                                            <div className=\"col-sm-5\">\r\n                                                                                <Field name={`addresses[${index}].addressLine1`}\r\n                                                                                    className={getClassName(errors, touched, index, 'addressLine1')}\r\n                                                                                    max-length=\"255\" placeholder=\"Address Line 1\"></Field>\r\n                                                                                <ErrorMessage name={`addresses[${index}].addressLine1`}>{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                                            </div>\r\n                                                                            <div className=\"col-sm-5\">\r\n                                                                                <Field name={`addresses[${index}].addressLine2`}\r\n                                                                                    className={getClassName(errors, touched, index, 'addressLine2')}\r\n                                                                                    max-length=\"255\" placeholder=\"Address Line 2\"></Field>\r\n                                                                                <ErrorMessage name={`addresses[${index}].addressLine2`}>{(msg) => <div className=\"alert-error\">{msg}</div>}</ErrorMessage>\r\n                                                                            </div>\r\n                                                                            <label className=\"col-sm-1 col-form-label\">\r\n                                                                                <AiOutlineDelete className=\"add\" onClick={\r\n                                                                                    () => arrayHelpers.remove(index)\r\n                                                                                } />\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}\r\n                                                            </>\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            </Modal.Body>\r\n                                            <Modal.Footer>\r\n                                                <Button variant=\"secondary\" onClick={() => { setShowFormModal(false); }}>\r\n                                                    Close\r\n                                                </Button>\r\n                                                <Button type=\"submit\" variant=\"primary\">\r\n                                                    Save Changes\r\n                                                </Button>\r\n                                            </Modal.Footer>\r\n                                        </>\r\n                                    </Form>\r\n                                </>\r\n                            )\r\n                        }\r\n                    }\r\n                </Formik>\r\n            </Modal>\r\n            <Modal show={showAddressDeleteConfirm}>\r\n                <Modal.Header>\r\n                    <Modal.Title>Delete Confirm</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure to delete the address?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={cancelDeleteAddress}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"danger\" onClick={deleteAddress}>\r\n                        Delete\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Employee;","import './App.css';\nimport Employee from './components/Employee';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Employee/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}